Golang pour le Web
La nouvelle tendance pour développer des applications WEB
28 Oct 2015
Tags: go, golang, web

Patrice FERLET
Expert Technique - Chef de Projet Technique - Smile.fr
pafer@smile.fr
metal3d@gmail.com
http://metal3d.org
@Metal3d

* Qui je suis

Patrice FERLET

Ingénieur Expert Python/PHP (et Go...) chez Smile

.image imgs/logo_smile_france.png

Auteur de quelques outils...

- kwiscale (framework Go en cours de test)
- vymad (générateur markdown depuis un mindmap)
- Belphegor (serveur Ghost.py pour générer des images de sites)
- ...

* Les préjugés

Go est considéré comme technique, mais il est pourtant très moderne et simple.

- 20 mots clefs environ
- « Convention over configuration »
- Vous allez enfin utiliser vos "cores" de CPU
- Vous vous penchez sur le code, l'algorithme, et non pas l'implémentation

« *less*is*exponentially*more* » 

.link http://commandcenter.blogspot.fr/2012/06/less-is-exponentially-more.html - Rob Pike

* Le langage Go 

* Historique rapide

Développé par des grands noms (qui travaillent chez Google)

- Rob pike
- Ken Thompson
- Robert Griesemer

Depuis 2007, délivré en 2009

Et très important: version 1.x en *Long* *Time* *Support*

- De base, un projet de recherche pur et simple
- Parce que le C++ prenait trop de temps à compiler
- Pour répondre à des problématiques de scallabilité chez Google

* En bref

Go en 3 points:

- Code compilé en binaire natif (Linux, Windows, OSX, BSD...)
- Des outils pour la "completion", le formatage automatique, génération de documentation, tests unitaires... tout là !
- Gestion de tâches concurrentes et communication avec des canaux (on va y venir)

* Qui l'utilise ?

Apcera, Bitbucket, bitly, Canonical, CloudFlare, Core OS, Digital Ocean, Docker, Dropbox, Facebook, Getty Images, GitHub, Heroku, Iron.io, Kubernetes, Medium, MongoDB services, Mozilla services, New York Times, pool.ntp.org, Secret, SmugMug, SoundCloud, Stripe, Square, Thomson Reuters, Tumblr, ...

Voir: 

.link golang.org/wiki/GoUsers

(liste tiré de http://talks.golang.org/2015/go-for-java-programmers.slide)

* N'ayez pas peur...

- Pas de classe
- Pas de constructeur
- Pas de generics
- Pas d'héritage
- Pas d'exception, pas d'annotation, pas de...
- Utilisation de pointeurs...

* ...

.image imgs/peur.jpg

* J'ai dit "n'ayez pas peur"

C'est *voulu*. 

Le langage répond à vos besoins par d'autres moyens.

- structure avec méthode (ça ressemble aux classes)
- compositing (ça ressemble à de l'héritage)
- gestion des erreurs et "recover" (avec un type "error")
- pointeur *simplifiés* (pas d'algèbre de pointeur)
- des interfaces
- des types très utiles (chan, complex, interface)
- des opérateurs natifs pour itérer, attendre des informations d'une routine
- des packages (pas de headers)


* Hello world

Rien de tel pour montrer la base:

.play -numbers src/hello.go


* Concurrence

On peut lancer des tâche en concurrence (qui peuvent tourner en parallèle).

.play -numbers src/routine.go /START C/,/END C/

* Concurrence

« Don't communicate by sharing memory; share memory by communicating. »

.play -numbers src/routine2.go /START C/,/END C/



* IDE et ecosystème

Intégration facile dans vim, emacs, intelliJ, eclipse, et bien d'autres...

Un IDE (indépendant) nommé LiteIDE spécialisé pour Go, avec debugger interactif

.link https://github.com/visualfc/liteide

- un SDK fourni (http, net, encrypt, json, etc...)
- des commandes pour formater le code, pour voir la doc (html, terminal, ...)
- outil de test intégré au SDK
- des "mocks" fournis
- un outil de téléchargement/installation de paquet qui gère git, bazaar et mercurial
- ...

* Ok mais... et donc, le Web ?

* Petit exemple 

.play -numbers -edit src/http1.go

* Des frameworks ?

Il en existe déjà beaucoup.

Les plus connus:

- Martini
- Revel
- Beegoo
- GorillaToolKit

Le moins connu de tous:

- Kwiscale :)

* Exemple avec Martini

.play src/martinitest/main.go

* Et niveau DB ?

Il existe des connecteurs pour preque toutes les bases (MySQL/MariaDB, Sqlite, Postgre, Mongo)

Il existe des ORM comme Gorm, beedb, upper.io

* Une petite api REST en martini + mongo

* Structure de projet

	.
	├── data
	│   ├── dataset.go
	│   └── mongo.go
	└── main.go


* Le package "data"

data/mongo.go

.code src/martinirest/data/mongo.go


* Le package "data"

On défini un livre:

data/dataset.go

.code src/martinirest/data/dataset.go /START STRUCT/,/END STRUCT/

* Le package "data"

La sauvegarde d'un livre:

data/dataset.go

.code src/martinirest/data/dataset.go /START BOOKSAVE/,/END BOOKSAVE/

* Le package "data"

Récupération en base:

data/dataset.go

.code src/martinirest/data/dataset.go /START BOOKGET/,/END BOOKGET/

* Le code principal

Dans le package « main », je définis mes "endpoints".

D'abord, le GET:

.code src/martinirest/main.go /START GET/,/END GET/

* Le code principal

Je définis le "endpoint" qui recevra un "POST":

.code src/martinirest/main.go /START POST/,/END POST/

* Et pour les templates ?

En built-in, un moteur très simple mais efficace

Sinon, Pongo2 (proche de Jinja2 ou Twig), Ace, ...

* Expériences

- mon blog, codé avec mon framework
- API pour une interface AngularJS
- un outil de pomodoro (avec websockets)
- un outil de création de diagramme UML interactif
- freshwind - serveur auto-rafraichi comme le fait "livereload"

* Des questions ?

Pour les autres, notez ces liens:

.link http://golang.org
.link http://gopkg.in/mgo.v2
.link https://revel.github.io
.link http://martini.codegangsta.io
