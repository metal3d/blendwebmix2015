Golang pour le Web
La nouvelle tendance pour développer des applications WEB
28 Oct 2015
Tags: go, golang, web

Patrice FERLET
Expert Technique - Chef de Projet Technique - Smile.fr
pafer@smile.fr
metal3d@gmail.com
http://metal3d.org
@Metal3d

* Qui je suis

Patrice FERLET

Ingénieur Expert Python/PHP (et Go...) chez Smile

.image imgs/logo_smile_france.png

Auteur de quelques outils...

- kwiscale (framework Go en cours de test)
- vymad (générateur markdown depuis un mindmap)
- Belphegor (serveur Ghost.py pour générer des images de sites)
- ...

* Préjugés

* Vous avez l'heure ?

Beaucoup d'entres vous lisent l'heure sur leur smartphone, sur leur PC...

Affichage digital, on est dans l'air du temps ! et pourtant...

* L'horloge est tendance

.image imgs/clock2.jpg _ 300
.caption Horloge vue sur [[http://www.amazon.fr/Horloge-Murale-moderne-D%C3%A9coratif-D%C3%A9coration/dp/B009NH12EY][amazon.fr]]

- Technique != Archaïque
- Technique != Compliqué

* Ce que je veux dire

Go est considéré comme technique, mais il est pourtant très moderne et simple.

- 20 mots clefs environ
- « Convention over configuration »
- Vous allez enfin utiliser vos "cores" de CPU
- Vous vous penchez sur le code, l'algorithme, et non pas l'implémentation

« *Less* *is* *exponentialy* *more* » 

.link http://commandcenter.blogspot.fr/2012/06/less-is-exponentially-more.html - Rob Pike

* Le langage Go 

* Historique rapide

Développé par des grands noms (qui travaillent chez Google)

- Rob pike
- Ken Thompson
- Robert Griesemer

Depuis 2007, délivré en 2009

Et très important: version 1.x en *Long* *Time* *Support*

* Pourquoi un nouveau langage ?

- De base, un projet de recherche pur et simple
- Parce que le C++ prenait trop de temps à compiler
- Parce que (nativement) le C++ ne sait pas gérer la concurrence
- Pour répondre à des problématiques de scallabilité chez Google

* Et au final

Le Go est né:

- Code compilé en binaire natif (Linux, Windows, OSX, BSD...)
- Des outils pour la "completion", le formatage automatique, la découverte de package, les tests unitaires... fourni !
- Gestion de tâches concurrentes et communication avec des canaux (on va y venir)

* N'ayez pas peur...

- Pas de classe
- Pas de constructeur
- Pas de generics
- Pas d'héritage
- Pas d'exception, pas d'annotation, pas de...
- Utilisation de pointeurs...


* J'ai dit "n'ayez pas peur"

Tout ces "pas de" sont voulu lors du "design de langage". Le langage répond à vos besoins par d'autres moyens.

- structure avec méthode (ça ressemble aux classes)
- compositing (ça ressemble à de l'héritage)
- gestion des erreurs et "recover" (avec un type "error")
- pointeur *simplifiés* (pas d'algèbre de pointeur)
- des interfaces
- des types très utiles (chan, complex, interface)
- des opérateurs natifs pour itérer, attendre des informations d'une routine
- une gestion *native* *de* *la* *concurrence* (je l'ai déjà dit non ?)
- des packages (pas de headers)


* Hello world

Rien de tel pour montrer la base:

.play -numbers src/hello.go


* Concurrence

J'en parle, mais je vous ai pas montré:

.play -numbers src/routine.go

* IDE et ecosystème

Intégration facile dans vim, emacs, intelliJ, eclipse, et bien d'autres...

Un IDE (indépendant) nommé LiteIDE spécialisé pour Go, avec debugger interactif

.link https://github.com/visualfc/liteide

- un SDK fourni (http, net, encrypt, json, etc...)
- des commandes pour formater le code, pour voir la doc (html, terminal, ...)
- outil de test intégré au SDK
- des "mocks" fournis
- un outil de téléchargement/installation de paquet qui gère git, bazaar et mercurial
- ...

* Dans vim

.image imgs/vim.png

* Dans eclipse

.image imgs/eclipse.png
.caption Capture le site [[http://www.finalhack.com/2013/04/first-impressions-go-golang.html][FinalHack.com]]

* Ok mais... et donc, le Web ?

* L'orientation du langage

Go est fortement orienté "réseau". Par effet de chaine, on a accès à des "built-in" pour interagir en HTTP.

Prenons un exemple, répondre à un appel HTTP. La documentation utile ici est:

.link https://golang.org/pkg/net/http/#HandleFunc


    $ go doc http.HandleFunc
    package http // import "net/http"

    func HandleFunc(pattern string, handler func(ResponseWriter, *Request))

        HandleFunc registers the handler function for the given pattern in the
        DefaultServeMux. The documentation for ServeMux explains how patterns are
        matched.


* Petit exemple 

.play -numbers -edit src/http1.go

* Des frameworks ?

Il en existe déjà beaucoup:

- Martini
- Revel
- Beegoo
- GorillaToolKit

* Exemple avec Martini

.play src/martinitest/main.go

* Et niveau DB ?

Il existe des connecteurs pour preque toutes les bases (MySQL/MariaDB, Sqlite, Postgre, Mongo)

Il existe des ORM comme Gorm, beedb, upper.io

* Une petite api REST en martini + mongo

* Le package "data"

.code src/martinirest/data/mongo.go


* Le package "data"

On défini un livre:

.code src/martinirest/data/dataset.go /START STRUCT/,/END STRUCT/

* Le package "data"

La sauvegarde d'un livre:

.code src/martinirest/data/dataset.go /START BOOKSAVE/,/END BOOKSAVE/

* Le package "data"

Récupération en base:

.code src/martinirest/data/dataset.go /START BOOKGET/,/END BOOKGET/

* Le code principal

Dans le package main, je définis mes "endpoints".

D'abord, le GET:

.code src/martinirest/main.go /START GET/,/END GET/

* Le code principal

Je définis le "endpoint" qui recevra un "POST":

.code src/martinirest/main.go /START POST/,/END POST/

* Et pour les templates ?

En built-in, un moteur très simple mais efficace

Sinon, Pongo2 (proche de Jinja2 ou Twig), Ace, ...

* Expériences

- mon blog, codé avec mon framework
- API pour une interface AngularJS
- un outil de pomodoro (avec websockets)
- un outil de création de diagramme UML interactif
- freshwind - serveur auto-rafraichi comme le fait "livereload"

* Des questions ?
